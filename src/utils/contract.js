import { ethers } from 'ethers';
import { recordSale } from '../services/statsService';

// Adresse de votre contrat d√©ploy√©
import contractAddresses from '../contracts/contract-address.json';
const CONTRACT_ADDRESS = contractAddresses.NFTMarketplace;

// ABI minimal pour les fonctions n√©cessaires
const CONTRACT_ABI = [
    "function fetchMarketItems() public view returns (tuple(uint256 tokenId, address seller, address owner, uint256 price, bool sold, bool listed)[])",
    "function fetchAllMarketItems() public view returns (tuple(uint256 tokenId, address seller, address owner, uint256 price, bool sold, bool listed)[])",
    "function fetchMyNFTs() public view returns (tuple(uint256 tokenId, address seller, address owner, uint256 price, bool sold, bool listed)[])",
    "function fetchItemsListed() public view returns (tuple(uint256 tokenId, address seller, address owner, uint256 price, bool sold, bool listed)[])",
    "function tokenURI(uint256 tokenId) public view returns (string)",
    "function createToken(string memory tokenURI, uint256 price) public payable returns (uint)",
    "function createMarketItem(uint256 tokenId, uint256 price) public payable",
    "function createMarketSale(uint256 tokenId) public payable",
    "function getListingPrice() public view returns (uint256)",
    "function withdrawListingItem(uint256 tokenId) public",
    "function getTokenCreator(uint256 tokenId) public view returns (address)",
    "function getMarketItem(uint256 tokenId) public view returns (tuple(uint256 tokenId, address seller, address owner, uint256 price, bool sold, bool listed))",
    "function totalSupply() public view returns (uint256)",
    // Fonctions d'ench√®res
    "function startAuction(uint256 tokenId, uint256 startingPrice, uint8 duration) public",
    "function placeBid(uint256 tokenId) public payable",
    "function endAuction(uint256 tokenId) public",
    "function withdrawBid(uint256 tokenId) public",
    "function getAuction(uint256 tokenId) public view returns (tuple(uint256 auctionId, uint256 tokenId, address seller, uint256 startingPrice, uint256 highestBid, address highestBidder, uint256 startTime, uint256 endTime, uint8 duration, bool active, bool ended))",
    "function fetchActiveAuctions() public view returns (tuple(uint256 auctionId, uint256 tokenId, address seller, uint256 startingPrice, uint256 highestBid, address highestBidder, uint256 startTime, uint256 endTime, uint8 duration, bool active, bool ended)[])",
    "function isAuctionEnded(uint256 tokenId) public view returns (bool)",
    "function getBidAmount(uint256 tokenId, address bidder) public view returns (uint256)",
    // Events
    "event MarketItemCreated(uint256 indexed tokenId, address seller, address owner, uint256 price, bool sold)",
    "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
    "event MarketItemSold(uint256 indexed tokenId, address seller, address buyer, uint256 price)",
    "event AuctionStarted(uint256 indexed auctionId, uint256 indexed tokenId, address seller, uint256 startingPrice, uint256 endTime, uint8 duration)",
    "event BidPlaced(uint256 indexed auctionId, uint256 indexed tokenId, address bidder, uint256 amount)",
    "event AuctionEnded(uint256 indexed auctionId, uint256 indexed tokenId, address winner, uint256 winningBid)",
    "event BidWithdrawn(uint256 indexed auctionId, address bidder, uint256 amount)"
];

// Obtenir le contrat avec signer (pour les transactions)
export const getContract = async () => {
    if (typeof window.ethereum !== 'undefined') {
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner();
        const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
        return { contract, provider, signer };
    }
    throw new Error('MetaMask non d√©tect√©');
};

// Obtenir le contrat en lecture seule (sans wallet connect√©)
export const getContractReadOnly = async () => {
    try {
        // Utiliser directement le provider RPC local
        const provider = new ethers.providers.JsonRpcProvider('http://127.0.0.1:8545');
        const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);
        return { contract, provider };
    } catch (error) {
        console.error('Erreur getContractReadOnly:', error);
        throw new Error('Impossible de se connecter au r√©seau blockchain');
    }
};

// Fonction helper pour extraire la cat√©gorie des attributes
const extractCategoryFromMetadata = (metadata) => {
    // 1. V√©rifier d'abord si metadata.category existe directement
    if (metadata.category) {
        return metadata.category;
    }

    // 2. Chercher dans les attributes
    if (metadata.attributes && Array.isArray(metadata.attributes)) {
        const categoryAttribute = metadata.attributes.find(attr =>
            attr.trait_type === "Category" ||
            attr.trait_type === "category" ||
            attr.name === "Category" ||
            attr.name === "category"
        );

        if (categoryAttribute && categoryAttribute.value) {
            return categoryAttribute.value;
        }
    }

    // 3. Fallback
    return null;
};

// Fonction helper pour traiter un item de march√©
const processMarketItem = async (contract, item) => {
    try {
        const tokenId = item.tokenId.toNumber();

        // V√©rifier que le tokenId est valide (> 0)
        if (!tokenId || tokenId === 0) {
            console.warn('Token ID invalide:', tokenId);
            return null;
        }

        // V√©rifier si on a des m√©tadonn√©es locales (optionnel, pour am√©liorer l'affichage)
        let localNFT = null;
        try {
            const { getSubmittedNFTs } = await import('../utils/storage');
            const localNFTs = getSubmittedNFTs();
            localNFT = localNFTs.find(nft => nft.tokenId === tokenId.toString() && nft.blockchainStatus === 'minted');
            if (localNFT) {
                console.log(`M√©tadonn√©es locales trouv√©es pour token ${tokenId}`);
            }
        } catch (error) {
            console.log(`Pas de m√©tadonn√©es locales pour token ${tokenId}`);
        }

        // Essayer de r√©cup√©rer l'URI du token
        let tokenUri;
        try {
            tokenUri = await contract.tokenURI(tokenId);
        } catch (error) {
            console.warn(`Token URI inaccessible pour token ${tokenId}:`, error.message);
            // Ne pas retourner null, continuer avec des m√©tadonn√©es par d√©faut
            tokenUri = null;
        }

        // Parser les m√©tadonn√©es AVEC gestion d'erreur am√©lior√©e
        let metadata = {
            name: `NFT #${tokenId}`,
            description: "NFT disponible sur le marketplace",
            image: null,
            attributes: []
        };

        if (tokenUri) {
            try {
                if (tokenUri.startsWith('data:application/json;base64,')) {
                    const base64Data = tokenUri.replace('data:application/json;base64,', '');
                    metadata = JSON.parse(atob(base64Data));
                } else if (tokenUri.startsWith('ipfs://')) {
                    // Utilisation du proxy Vite pour √©viter les CORS
                    const hash = tokenUri.replace('ipfs://', '');
                    const proxyUrl = `/ipfs-proxy/${hash}`;

                    try {
                        console.log(`üì° Fetch IPFS via proxy pour token ${tokenId}: ${proxyUrl}`);

                        const controller = new AbortController();
                        const timeoutId = setTimeout(() => controller.abort(), 10000);

                        const response = await fetch(proxyUrl, {
                            signal: controller.signal,
                            headers: { 'Accept': 'application/json' }
                        });
                        clearTimeout(timeoutId);

                        if (response.ok) {
                            metadata = await response.json();
                            console.log(`‚úÖ IPFS proxy r√©ussi pour token ${tokenId}`);
                        } else {
                            console.warn(`‚ùå IPFS proxy √©chou√© (${response.status}) pour token ${tokenId}`);
                        }
                    } catch (fetchError) {
                        console.warn(`‚ùå IPFS proxy erreur pour token ${tokenId}:`, fetchError.message);
                    }
                } else if (tokenUri.startsWith('http')) {
                    try {
                        const controller = new AbortController();
                        const timeoutId = setTimeout(() => controller.abort(), 5000);

                        const response = await fetch(tokenUri, { signal: controller.signal });
                        clearTimeout(timeoutId);

                        if (response.ok) {
                            metadata = await response.json();
                        } else {
                            throw new Error(`HTTP ${response.status}`);
                        }
                    } catch (fetchError) {
                        console.warn(`HTTP fetch √©chou√© pour ${tokenId}:`, fetchError.message);
                        // Garder les m√©tadonn√©es par d√©faut
                    }
                }
            } catch (error) {
                console.warn(`Erreur parsing m√©tadonn√©es pour token ${tokenId}:`, error.message);
                // Les m√©tadonn√©es par d√©faut sont d√©j√† d√©finies
            }
        }

        // Debug: afficher les m√©tadonn√©es r√©cup√©r√©es
        const extractedCategory = extractCategoryFromMetadata(metadata);
        console.log(`=== DEBUG M√âTADONN√âES TOKEN ${tokenId} ===`);
        console.log('Metadata compl√®te:', metadata);
        console.log('Cat√©gorie extraite:', extractedCategory);
        console.log('LocalNFT trouv√©:', localNFT ? 'Oui' : 'Non');
        if (localNFT) {
            console.log('Cat√©gorie locale:', localNFT.category);
        }

        // Utiliser les m√©tadonn√©es locales si disponibles, sinon blockchain
        return {
            id: tokenId,
            tokenId: tokenId,
            name: localNFT ? localNFT.name : (metadata.name || `NFT #${tokenId}`),
            description: localNFT ? localNFT.description : (metadata.description || "NFT disponible sur le marketplace"),
            image: localNFT ? localNFT.image : metadata.image,
            price: parseFloat(ethers.utils.formatEther(item.price || 0)),
            // Logique d'affichage du propri√©taire :
            // - Si en vente ET pas vendu : afficher le vendeur (celui qui a mis en vente)
            // - Sinon : afficher le vrai propri√©taire
            owner: (item.listed && !item.sold) ? (item.seller || 'Inconnu') : (item.owner || 'Inconnu'),
            seller: item.seller || 'Inconnu',
            sold: item.sold || false,
            forSale: item.listed || false,
            category: localNFT ? localNFT.category : (extractCategoryFromMetadata(metadata) || "Digital Art"),
            likes: localNFT ? (localNFT.likes || 0) : 0,
            views: localNFT ? (localNFT.views || 0) : 0,
            createdAt: new Date().toISOString().split('T')[0],
            // IMPORTANT: Toujours marquer comme NFT blockchain
            isLocal: false,
            source: 'blockchain',
            blockchainStatus: 'minted'
        };
    } catch (error) {
        console.error(`Erreur traitement token ${item.tokenId}:`, error);
        return null;
    }
};

// Obtenir tous les NFTs en vente sur le marketplace (LECTURE SEULE)
export const fetchMarketplaceNFTs = async () => {
    try {
        const { contract } = await getContractReadOnly();

        // Test de connectivit√© simple
        try {
            await contract.getListingPrice();
            console.log('Contrat accessible');
        } catch (connectError) {
            console.warn('Contrat non accessible:', connectError.message);
            return [];
        }

        // Utiliser fetchAllMarketItems et filtrer c√¥t√© client
        const data = await contract.fetchAllMarketItems();
        // Filtrer seulement les NFTs en vente (listed = true ET sold = false)
        const forSaleItems = data.filter(item => item.listed && !item.sold);
        console.log('Donn√©es brutes fetchAllMarketItems:', data);
        console.log('NFTs en vente filtr√©s:', forSaleItems);

        // Filtrer STRICTEMENT les items valides EN VENTE
        const validItems = forSaleItems.filter(item => {
            const tokenId = item.tokenId ? item.tokenId.toNumber() : 0;
            const isListed = item.listed === true;
            const isNotSold = item.sold === false;
            const hasValidId = tokenId > 0;

            console.log(`Token ${tokenId}: valid=${hasValidId}, listed=${isListed}, notSold=${isNotSold}`);

            return hasValidId && isListed && isNotSold;
        });

        console.log(`NFTs en vente trouv√©s: ${validItems.length}`);

        if (validItems.length === 0) {
            console.log('Aucun NFT en vente trouv√©');
            return [];
        }

        const items = await Promise.all(
            validItems.map(item => processMarketItem(contract, item))
        );

        const finalItems = items.filter(item => item !== null);
        console.log(`NFTs en vente trait√©s: ${finalItems.length}`);

        return finalItems;
    } catch (error) {
        console.error('Erreur fetchMarketplaceNFTs:', error);
        return [];
    }
};

// Obtenir TOUS les NFTs qui ont exist√© dans le marketplace (LECTURE SEULE)
export const fetchAllMarketplaceNFTs = async () => {
    try {
        const { contract } = await getContractReadOnly();

        // Test de connectivit√© simple
        try {
            await contract.getListingPrice();
            console.log('Contrat accessible pour fetchAllMarketItems');
        } catch (connectError) {
            console.warn('Contrat non accessible:', connectError.message);
            return [];
        }

        const data = await contract.fetchAllMarketItems();
        console.log('Donn√©es brutes fetchAllMarketItems (historique complet):', data);

        // Filtrer seulement les items avec des token IDs valides
        const validItems = data.filter(item => {
            const tokenId = item.tokenId ? item.tokenId.toNumber() : 0;
            const hasValidId = tokenId > 0;

            console.log(`Token ${tokenId}: valid=${hasValidId}, listed=${item.listed}, sold=${item.sold}`);

            return hasValidId;
        });

        console.log(`Total NFTs marketplace trouv√©s: ${validItems.length}`);

        if (validItems.length === 0) {
            console.log('Aucun NFT marketplace trouv√©');
            return [];
        }

        const items = await Promise.all(
            validItems.map(item => processMarketItem(contract, item))
        );

        const finalItems = items.filter(item => item !== null);
        console.log(`Total NFTs marketplace trait√©s: ${finalItems.length}`);

        return finalItems;
    } catch (error) {
        console.error('Erreur fetchAllMarketplaceNFTs:', error);
        return [];
    }
};

// Obtenir les NFTs poss√©d√©s par l'utilisateur connect√© (N√âCESSITE WALLET)
export const fetchUserNFTs = async (userAddress) => {
    try {
        const { contract } = await getContract();
        const data = await contract.fetchMyNFTs();
        
        console.log('Donn√©es fetchMyNFTs:', data);
        
        // Filtrer les items valides avant traitement
        const validItems = data.filter(item => {
            const tokenId = item.tokenId ? item.tokenId.toNumber() : 0;
            return tokenId > 0;
        });
        
        if (validItems.length === 0) {
            console.log('Aucun NFT valide trouv√© pour cet utilisateur');
            return [];
        }
        
        const items = await Promise.all(
            validItems.map(item => processMarketItem(contract, item))
        );
        
        return items.filter(item => item !== null);
    } catch (error) {
        console.error('Erreur fetchUserNFTs:', error);
        return [];
    }
};

// Obtenir les NFTs list√©s par l'utilisateur (N√âCESSITE WALLET)
export const fetchUserListedNFTs = async () => {
    try {
        const { contract } = await getContract();

        // V√©rifier d'abord que le contrat a la fonction
        if (!contract.fetchItemsListed) {
            console.warn('fetchItemsListed non disponible sur le contrat');
            return [];
        }

        const data = await contract.fetchItemsListed();

        console.log('Donn√©es fetchItemsListed:', data);

        // Si pas de donn√©es, retourner un tableau vide
        if (!data || data.length === 0) {
            console.log('Aucun NFT list√© trouv√©');
            return [];
        }

        // Filtrer STRICTEMENT les items valides ET encore en vente
        const validItems = data.filter(item => {
            const tokenId = item.tokenId ? item.tokenId.toNumber() : 0;
            const isListed = item.listed === true;
            const isNotSold = item.sold === false;

            console.log(`Token ${tokenId}: valid=${tokenId > 0}, listed=${isListed}, notSold=${isNotSold}`);

            return tokenId > 0 && isListed && isNotSold;
        });

        if (validItems.length === 0) {
            console.log('Aucun NFT list√© valide trouv√©');
            return [];
        }

        const items = await Promise.all(
            validItems.map(item => processMarketItem(contract, item))
        );

        return items.filter(item => item !== null);
    } catch (error) {
        console.error('Erreur fetchUserListedNFTs:', error);

        // Si c'est une erreur de revert, c'est probablement normal (pas de NFTs list√©s)
        if (error.code === 'CALL_EXCEPTION') {
            console.log('Aucun NFT list√© par cet utilisateur (contrat revert normal)');
            return [];
        }

        // Pour les autres erreurs, les logger mais retourner un tableau vide
        return [];
    }
};

// Mettre un NFT en vente
export const listNFTForSale = async (tokenId, price) => {
    try {
        const { contract } = await getContract();
        
        // Obtenir le prix de listing
        const listingPrice = await contract.getListingPrice();
        
        // Convertir le prix en Wei
        const priceInWei = ethers.utils.parseEther(price.toString());
        
        const transaction = await contract.createMarketItem(tokenId, priceInWei, {
            value: listingPrice
        });
        
        await transaction.wait();
        return transaction;
    } catch (error) {
        console.error('Erreur mise en vente NFT:', error);
        throw error;
    }
};
export const buyNFT = async (tokenId, price) => {
    try {
        const { contract, provider, signer } = await getContract();

        // 1. V√©rifier le solde de l'acheteur
        const buyerAddress = await signer.getAddress();
        const balance = await signer.getBalance();
        const priceInWei = ethers.utils.parseEther(price.toString());

        console.log('=== V√âRIFICATION ACHAT ===');
        console.log('Acheteur:', buyerAddress);
        console.log('Solde:', ethers.utils.formatEther(balance), 'ETH');
        console.log('Prix requis:', price, 'ETH');

        // V√©rifier si l'acheteur a assez d'ETH (avec marge pour le gas)
        const gasEstimate = ethers.utils.parseEther('0.01'); // Estimation conservative du gas
        const totalRequired = priceInWei.add(gasEstimate);

        if (balance.lt(totalRequired)) {
            throw new Error(`Solde insuffisant. Vous avez ${ethers.utils.formatEther(balance)} ETH, mais ${ethers.utils.formatEther(totalRequired)} ETH sont requis (prix + gas estim√©).`);
        }

        // 2. R√©cup√©rer les infos du NFT avant l'achat pour le suivi
        const marketItem = await contract.getMarketItem(tokenId);
        const seller = marketItem.seller;

        console.log('NFT Info avant achat:');
        console.log('Vendeur:', seller);
        console.log('Prix:', ethers.utils.formatEther(marketItem.price), 'ETH');

        // 3. Effectuer la transaction d'achat
        console.log('üõí Lancement de l\'achat...');
        const transaction = await contract.createMarketSale(tokenId, {
            value: priceInWei,
            gasLimit: 500000 // Gas limit conservateur
        });

        console.log('Transaction d\'achat envoy√©e:', transaction.hash);
        const receipt = await transaction.wait();
        console.log('‚úÖ Achat confirm√© !');

        // 4. Enregistrer la vente sur le serveur pour les recommandations
        try {
            await recordSale(tokenId, price, buyerAddress, seller);
            console.log('üéØ Vente enregistr√©e pour les recommandations');
        } catch (error) {
            console.warn('Erreur enregistrement vente pour recommandations:', error);
        }

        // 5. Enregistrer la transaction dans l'historique
        const transactionRecord = {
            id: `tx-${Date.now()}`,
            type: 'purchase',
            tokenId: tokenId,
            nftName: `NFT #${tokenId}`, // Sera mis √† jour avec le vrai nom si disponible
            buyer: buyerAddress,
            seller: seller,
            price: parseFloat(price),
            priceETH: `${price} ETH`,
            transactionHash: transaction.hash,
            date: new Date().toISOString(),
            timestamp: Date.now(),
            blockNumber: receipt.blockNumber,
            gasUsed: receipt.gasUsed.toString()
        };

        // Sauvegarder dans localStorage
        const existingHistory = JSON.parse(localStorage.getItem('nft-transactions') || '[]');
        existingHistory.unshift(transactionRecord); // Ajouter au d√©but

        // Garder seulement les 100 derni√®res transactions
        if (existingHistory.length > 100) {
            existingHistory.splice(100);
        }

        localStorage.setItem('nft-transactions', JSON.stringify(existingHistory));

        console.log('üìù Transaction enregistr√©e dans l\'historique:', transactionRecord);

        return {
            transaction,
            receipt,
            transactionRecord
        };

    } catch (error) {
        console.error('Erreur achat NFT:', error);
        throw error;
    }
};

// Obtenir l'historique des transactions
export const getTransactionHistory = () => {
    try {
        const history = JSON.parse(localStorage.getItem('nft-transactions') || '[]');
        return history.sort((a, b) => b.timestamp - a.timestamp); // Trier par date d√©croissante
    } catch (error) {
        console.error('Erreur lecture historique:', error);
        return [];
    }
};

// Effacer l'historique des transactions
export const clearTransactionHistory = () => {
    localStorage.removeItem('nft-transactions');
};

// Obtenir les transactions pour un NFT sp√©cifique
export const getNFTTransactionHistory = (tokenId) => {
    const allTransactions = getTransactionHistory();
    return allTransactions.filter(tx => tx.tokenId.toString() === tokenId.toString());
};

// Retirer un NFT de la vente
export const withdrawNFT = async (tokenId) => {
    try {
        const { contract } = await getContract();
        const transaction = await contract.withdrawListingItem(tokenId);
        await transaction.wait();
        return transaction;
    } catch (error) {
        console.error('Erreur retrait NFT:', error);
        throw error;
    }
};

// Obtenir les d√©tails d'un NFT sp√©cifique (LECTURE SEULE)
export const getNFTDetails = async (tokenId) => {
    try {
        const { contract } = await getContractReadOnly();

        // V√©rifier que le tokenId est valide
        if (!tokenId || tokenId === 0) {
            throw new Error('Token ID invalide');
        }

        console.log(`getNFTDetails appel√© pour token ID: ${tokenId}`);

        // D'abord, v√©rifier si on a des m√©tadonn√©es locales pour ce token ID (pour r√©cup√©rer la vraie image)
        const { getSubmittedNFTs } = await import('../utils/storage');
        const localNFTs = getSubmittedNFTs();
        const localNFT = localNFTs.find(nft => nft.tokenId === tokenId.toString() && nft.blockchainStatus === 'minted');
        
        // R√©cup√©rer les donn√©es du contrat
        const [marketItem, tokenURI, creator] = await Promise.all([
            contract.getMarketItem(tokenId).catch(() => null),
            contract.tokenURI(tokenId).catch(() => null),
            contract.getTokenCreator(tokenId).catch(() => null)
        ]);
        
        if (!tokenURI) {
            throw new Error('NFT non trouv√© ou inaccessible');
        }
        
        // Parser les m√©tadonn√©es avec gestion d'erreur robuste
        let metadata = {
            name: `NFT #${tokenId}`,
            description: "NFT cr√©√© sur votre marketplace",
            image: null
        };

        try {
            if (tokenURI.startsWith('data:application/json;base64,')) {
                const base64Data = tokenURI.replace('data:application/json;base64,', '');
                metadata = JSON.parse(atob(base64Data));
            } else if (tokenURI.startsWith('ipfs://')) {
                // Utilisation du proxy Vite pour √©viter les CORS
                const hash = tokenURI.replace('ipfs://', '');
                const proxyUrl = `/ipfs-proxy/${hash}`;

                try {
                    console.log(`üì° Fetch IPFS details via proxy pour token ${tokenId}: ${proxyUrl}`);

                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 10000);

                    const response = await fetch(proxyUrl, {
                        signal: controller.signal,
                        headers: { 'Accept': 'application/json' }
                    });
                    clearTimeout(timeoutId);

                    if (response.ok) {
                        metadata = await response.json();
                        console.log(`‚úÖ IPFS details proxy r√©ussi pour token ${tokenId}`);
                    } else {
                        console.warn(`‚ùå IPFS details proxy √©chou√© (${response.status}) pour token ${tokenId}`);
                    }
                } catch (fetchError) {
                    console.warn(`‚ùå IPFS details proxy erreur pour token ${tokenId}:`, fetchError.message);
                }
            } else if (tokenURI.startsWith('http')) {
                try {
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 5000);

                    const response = await fetch(tokenURI, { signal: controller.signal });
                    clearTimeout(timeoutId);

                    if (response.ok) {
                        metadata = await response.json();
                    }
                } catch (fetchError) {
                    console.warn(`HTTP fetch √©chou√© pour token ${tokenId}:`, fetchError.message);
                }
            }
        } catch (error) {
            console.warn(`Erreur parsing m√©tadonn√©es token ${tokenId}:`, error.message);
        }
        
        return {
            id: tokenId,
            tokenId: parseInt(tokenId),
            name: localNFT ? localNFT.name : (metadata.name || `NFT #${tokenId}`),
            description: localNFT ? localNFT.description : (metadata.description || ""),
            image: localNFT ? localNFT.image : metadata.image, // Utiliser la vraie image si disponible
            price: marketItem ? parseFloat(ethers.utils.formatEther(marketItem.price)) : 0,
            // M√™me logique d'affichage du propri√©taire pour les d√©tails
            owner: marketItem && marketItem.listed && !marketItem.sold
                ? marketItem.seller
                : (marketItem ? marketItem.owner : creator),
            seller: marketItem ? marketItem.seller : null,
            creator: creator || 'Inconnu',
            sold: marketItem ? marketItem.sold : false,
            forSale: marketItem ? marketItem.listed : false,
            category: localNFT ? localNFT.category : (extractCategoryFromMetadata(metadata) || "Digital Art"),
            likes: localNFT ? localNFT.likes || 0 : 0,
            views: localNFT ? localNFT.views || 0 : 0,
            createdAt: new Date().toISOString().split('T')[0],
            // IMPORTANT: Marquer explicitement comme NFT blockchain
            isLocal: false,
            source: 'blockchain',
            blockchainStatus: 'minted',
            transfers: [
                {
                    from: "0x0000000000000000000000000000000000000000",
                    to: creator || 'Inconnu',
                    date: new Date().toISOString().split('T')[0],
                    price: null
                }
            ]
        };
    } catch (error) {
        console.error('Erreur getNFTDetails:', error);
        throw error;
    }
};

// Fonction pour r√©cup√©rer l'historique des transferts d'un NFT
export const getNFTHistory = async (tokenId) => {
    try {
        const { contract, provider } = await getContractReadOnly();

        console.log(`R√©cup√©ration historique pour NFT ${tokenId}`);

        // R√©cup√©rer tous les √©v√©nements Transfer pour ce token
        const transferFilter = contract.filters.Transfer(null, null, tokenId);
        const transferEvents = await contract.queryFilter(transferFilter, 0, 'latest');

        // R√©cup√©rer tous les √©v√©nements MarketItemCreated pour ce token
        const createdFilter = contract.filters.MarketItemCreated(tokenId);
        const createdEvents = await contract.queryFilter(createdFilter, 0, 'latest');

        // R√©cup√©rer tous les √©v√©nements MarketItemSold pour ce token
        const soldFilter = contract.filters.MarketItemSold(tokenId);
        const soldEvents = await contract.queryFilter(soldFilter, 0, 'latest');

        // Construire l'historique complet
        const history = [];

        // Traiter les √©v√©nements Transfer
        for (const event of transferEvents) {
            const block = await provider.getBlock(event.blockNumber);
            const transaction = await provider.getTransaction(event.transactionHash);

            let eventType = 'transfer';
            let price = null;

            // D√©terminer le type d'√©v√©nement
            if (event.args.from === '0x0000000000000000000000000000000000000000') {
                eventType = 'mint';
            }

            // V√©rifier s'il y a un √©v√©nement de vente correspondant
            const saleEvent = soldEvents.find(sale =>
                sale.transactionHash === event.transactionHash
            );

            if (saleEvent) {
                eventType = 'sale';
                price = parseFloat(ethers.utils.formatEther(saleEvent.args.price));
            }

            history.push({
                type: eventType,
                from: event.args.from,
                to: event.args.to,
                price: price,
                timestamp: block.timestamp,
                date: new Date(block.timestamp * 1000).toLocaleDateString('fr-FR'),
                time: new Date(block.timestamp * 1000).toLocaleTimeString('fr-FR'),
                transactionHash: event.transactionHash,
                blockNumber: event.blockNumber
            });
        }

        // Traiter les √©v√©nements MarketItemCreated (mises en vente)
        for (const event of createdEvents) {
            const block = await provider.getBlock(event.blockNumber);

            // V√©rifier qu'il n'y a pas d√©j√† un √©v√©nement pour cette transaction
            const existingEvent = history.find(h => h.transactionHash === event.transactionHash);

            if (!existingEvent) {
                history.push({
                    type: 'listed',
                    from: event.args.seller,
                    to: null,
                    price: parseFloat(ethers.utils.formatEther(event.args.price)),
                    timestamp: block.timestamp,
                    date: new Date(block.timestamp * 1000).toLocaleDateString('fr-FR'),
                    time: new Date(block.timestamp * 1000).toLocaleTimeString('fr-FR'),
                    transactionHash: event.transactionHash,
                    blockNumber: event.blockNumber
                });
            }
        }

        // Trier par timestamp (plus ancien en premier pour avoir l'ordre chronologique)
        history.sort((a, b) => a.timestamp - b.timestamp);

        console.log(`Historique r√©cup√©r√©: ${history.length} √©v√©nements`);
        return history;

    } catch (error) {
        console.error('Erreur getNFTHistory:', error);
        return [];
    }
};

// ============ FONCTIONS D'ENCH√àRES ============

// Lancer une ench√®re
export const startAuction = async (tokenId, startingPrice, duration) => {
    try {
        console.log('Lancement ench√®re:', { tokenId, startingPrice, duration });

        const { contract } = await getContract();
        const startingPriceWei = ethers.utils.parseEther(startingPrice.toString());

        // Appeler la fonction startAuction du contrat
        const transaction = await contract.startAuction(tokenId, startingPriceWei, duration);

        console.log('Transaction envoy√©e:', transaction.hash);
        const receipt = await transaction.wait();
        console.log('Transaction confirm√©e:', receipt);

        return {
            success: true,
            transactionHash: transaction.hash,
            transactionRecord: receipt
        };

    } catch (error) {
        console.error('Erreur startAuction:', error);
        throw new Error('Erreur lors du lancement de l\'ench√®re');
    }
};

// Placer une ench√®re
export const placeBid = async (tokenId, bidAmount) => {
    try {
        console.log('Placement ench√®re:', { tokenId, bidAmount });

        const { contract } = await getContract();
        const bidAmountWei = ethers.utils.parseEther(bidAmount.toString());

        // Appeler la fonction placeBid du contrat
        const transaction = await contract.placeBid(tokenId, { value: bidAmountWei });

        console.log('Transaction envoy√©e:', transaction.hash);
        const receipt = await transaction.wait();
        console.log('Transaction confirm√©e:', receipt);

        return {
            success: true,
            transactionHash: transaction.hash,
            transactionRecord: receipt
        };

    } catch (error) {
        console.error('Erreur placeBid:', error);
        throw new Error('Erreur lors du placement de l\'ench√®re');
    }
};

// Terminer une ench√®re
export const endAuction = async (tokenId) => {
    try {
        console.log('Fin ench√®re:', { tokenId });

        const { contract } = await getContract();

        // Appeler la fonction endAuction du contrat
        const transaction = await contract.endAuction(tokenId);

        console.log('Transaction envoy√©e:', transaction.hash);
        const receipt = await transaction.wait();
        console.log('Transaction confirm√©e:', receipt);

        return {
            success: true,
            transactionHash: transaction.hash,
            transactionRecord: receipt
        };

    } catch (error) {
        console.error('Erreur endAuction:', error);
        throw new Error('Erreur lors de la finalisation de l\'ench√®re');
    }
};

// Retirer une ench√®re perdante
export const withdrawBid = async (tokenId) => {
    try {
        console.log('Retrait ench√®re:', { tokenId });

        const { contract } = await getContract();

        // Appeler la fonction withdrawBid du contrat
        const transaction = await contract.withdrawBid(tokenId);

        console.log('Transaction envoy√©e:', transaction.hash);
        const receipt = await transaction.wait();
        console.log('Transaction confirm√©e:', receipt);

        return {
            success: true,
            transactionHash: transaction.hash,
            transactionRecord: receipt
        };

    } catch (error) {
        console.error('Erreur withdrawBid:', error);
        throw new Error('Erreur lors du retrait de l\'ench√®re');
    }
};

// Obtenir les d√©tails d'une ench√®re
export const getAuctionDetails = async (tokenId) => {
    try {
        const { contract } = await getContractReadOnly();
        const auction = await contract.getAuction(tokenId);

        return {
            auctionId: auction.auctionId.toString(),
            tokenId: auction.tokenId.toString(),
            seller: auction.seller,
            startingPrice: ethers.utils.formatEther(auction.startingPrice),
            highestBid: ethers.utils.formatEther(auction.highestBid),
            highestBidder: auction.highestBidder,
            startTime: auction.startTime.toNumber(),
            endTime: auction.endTime.toNumber(),
            duration: auction.duration,
            active: auction.active,
            ended: auction.ended
        };

    } catch (error) {
        console.error('Erreur getAuctionDetails:', error);
        return null;
    }
};

// R√©cup√©rer toutes les ench√®res actives
export const fetchActiveAuctions = async () => {
    try {
        const { contract } = await getContractReadOnly();
        const auctions = await contract.fetchActiveAuctions();

        return auctions.map(auction => ({
            auctionId: auction.auctionId.toString(),
            tokenId: auction.tokenId.toString(),
            seller: auction.seller,
            startingPrice: ethers.utils.formatEther(auction.startingPrice),
            highestBid: ethers.utils.formatEther(auction.highestBid),
            highestBidder: auction.highestBidder,
            startTime: auction.startTime.toNumber(),
            endTime: auction.endTime.toNumber(),
            duration: auction.duration,
            active: auction.active,
            ended: auction.ended
        }));

    } catch (error) {
        console.error('Erreur fetchActiveAuctions:', error);
        return [];
    }
};

// V√©rifier si une ench√®re est termin√©e
export const isAuctionEnded = async (tokenId) => {
    try {
        const { contract } = await getContractReadOnly();
        return await contract.isAuctionEnded(tokenId);
    } catch (error) {
        console.error('Erreur isAuctionEnded:', error);
        return false;
    }
};

// Obtenir le montant de l'ench√®re d'un utilisateur
export const getBidAmount = async (tokenId, bidderAddress) => {
    try {
        const { contract } = await getContractReadOnly();
        const amount = await contract.getBidAmount(tokenId, bidderAddress);
        return ethers.utils.formatEther(amount);
    } catch (error) {
        console.error('Erreur getBidAmount:', error);
        return '0';
    }
};

// V√©rifier qui est le vrai propri√©taire d'un NFT selon la blockchain
export const getRealTokenOwner = async (tokenId) => {
    try {
        const { contract } = await getContractReadOnly();
        const owner = await contract.ownerOf(tokenId);
        return owner;
    } catch (error) {
        console.error('Erreur getRealTokenOwner:', error);
        return null;
    }
};

// Fonction pour r√©cup√©rer TOUS les NFTs (marketplace + ench√®res)
export const fetchAllNFTsIncludingAuctions = async () => {
    try {
        // 1. R√©cup√©rer les NFTs marketplace classiques
        const marketplaceNFTs = await fetchAllMarketplaceNFTs();

        // 2. R√©cup√©rer les ench√®res actives
        const activeAuctions = await fetchActiveAuctions();

        // 3. Convertir les ench√®res en format NFT et les ajouter
        const auctionNFTs = await Promise.all(
            activeAuctions.map(async (auction) => {
                try {
                    // V√©rifier si l'ench√®re est vraiment active (pas expir√©e)
                    const currentTime = Math.floor(Date.now() / 1000);
                    const isExpired = currentTime > auction.endTime;

                    // Si l'ench√®re est expir√©e, ne pas l'inclure dans les ench√®res actives
                    if (isExpired && auction.active) {
                        console.log(`Ench√®re ${auction.tokenId} expir√©e mais pas encore finalis√©e`);
                        return null;
                    }

                    // R√©cup√©rer les m√©tadonn√©es du NFT en ench√®res
                    const tokenId = parseInt(auction.tokenId);
                    const { contract } = await getContractReadOnly();
                    const tokenURI = await contract.tokenURI(tokenId);

                    let metadata = {
                        name: `NFT #${tokenId}`,
                        description: "NFT en ench√®res",
                        image: ""
                    };

                    // Parser les m√©tadonn√©es si possible
                    if (tokenURI && tokenURI.startsWith('data:application/json;base64,')) {
                        try {
                            const jsonString = atob(tokenURI.split(',')[1]);
                            metadata = JSON.parse(jsonString);
                        } catch (e) {
                            console.warn(`Erreur parsing m√©tadonn√©es ench√®re ${tokenId}:`, e);
                        }
                    }

                    return {
                        id: tokenId,
                        tokenId: tokenId,
                        name: metadata.name || `NFT #${tokenId}`,
                        description: metadata.description || "NFT en ench√®res",
                        image: metadata.image || "",
                        price: parseFloat(auction.highestBid) || parseFloat(auction.startingPrice),
                        currentBid: parseFloat(auction.highestBid),
                        startingPrice: parseFloat(auction.startingPrice),
                        highestBid: auction.highestBid,
                        highestBidder: auction.highestBidder,
                        owner: auction.seller,
                        seller: auction.seller,
                        sold: false,
                        forSale: false, // Pas en vente directe
                        inAuction: true && !isExpired, // Marquer comme en ench√®res seulement si pas expir√©e
                        endTime: auction.endTime,
                        startTime: auction.startTime,
                        isAuctionExpired: isExpired,
                        auction: {
                            auctionId: auction.auctionId,
                            highestBid: auction.highestBid,
                            highestBidder: auction.highestBidder,
                            startTime: auction.startTime,
                            endTime: auction.endTime,
                            active: auction.active && !isExpired,
                            ended: auction.ended || isExpired
                        },
                        category: metadata.attributes?.find(attr => attr.trait_type === 'Category')?.value || "Digital Art",
                        isLocal: false,
                        source: 'blockchain-auction',
                        blockchainStatus: 'minted'
                    };
                } catch (error) {
                    console.error(`Erreur traitement ench√®re ${auction.tokenId}:`, error);
                    return null;
                }
            })
        );

        // 4. Filtrer les ench√®res nulles et combiner avec les NFTs marketplace
        const validAuctionNFTs = auctionNFTs.filter(nft => nft !== null);

        // 5. √âviter les doublons : un NFT ne peut pas √™tre √† la fois en vente ET en ench√®res
        const allTokenIds = new Set();
        const combinedNFTs = [];

        // Ajouter d'abord les ench√®res (priorit√©)
        validAuctionNFTs.forEach(nft => {
            if (!allTokenIds.has(nft.tokenId)) {
                allTokenIds.add(nft.tokenId);
                combinedNFTs.push(nft);
            }
        });

        // Ajouter ensuite les NFTs marketplace qui ne sont pas en ench√®res
        marketplaceNFTs.forEach(nft => {
            if (!allTokenIds.has(nft.tokenId)) {
                allTokenIds.add(nft.tokenId);
                combinedNFTs.push(nft);
            }
        });

        console.log('NFTs combin√©s:', {
            marketplace: marketplaceNFTs.length,
            auctions: validAuctionNFTs.length,
            total: combinedNFTs.length
        });

        return combinedNFTs;

    } catch (error) {
        console.error('Erreur fetchAllNFTsIncludingAuctions:', error);
        // En cas d'erreur, retourner au moins les NFTs marketplace
        return await fetchAllMarketplaceNFTs();
    }
};