const fs = require('fs-extra');
const path = require('path');

/**
 * Script pour installer les Git hooks automatiquement
 */

const HOOKS_SOURCE_DIR = path.join(__dirname, '..', '.githooks');
const HOOKS_TARGET_DIR = path.join(__dirname, '..', '.git', 'hooks');

async function installGitHooks() {
  try {
    console.log('ü™ù Installation des Git hooks...');

    // V√©rifier que nous sommes dans un repo Git
    if (!await fs.pathExists(HOOKS_TARGET_DIR)) {
      throw new Error('R√©pertoire .git/hooks non trouv√©. Assurez-vous d\'√™tre dans un repository Git.');
    }

    // V√©rifier que le dossier source existe
    if (!await fs.pathExists(HOOKS_SOURCE_DIR)) {
      throw new Error('R√©pertoire .githooks non trouv√©.');
    }

    // Lister les hooks √† installer
    const hookFiles = await fs.readdir(HOOKS_SOURCE_DIR);

    for (const hookFile of hookFiles) {
      const sourcePath = path.join(HOOKS_SOURCE_DIR, hookFile);
      const targetPath = path.join(HOOKS_TARGET_DIR, hookFile);

      // Copier le hook
      await fs.copy(sourcePath, targetPath);

      // Rendre ex√©cutable (Unix/Linux/Mac)
      try {
        await fs.chmod(targetPath, '755');
        console.log(`‚úÖ Hook install√©: ${hookFile}`);
      } catch (chmodError) {
        console.log(`‚úÖ Hook install√©: ${hookFile} (chmod non support√© sur Windows)`);
      }
    }

    console.log('üéâ Git hooks install√©s avec succ√®s !');
    console.log('üí° Les statistiques du README seront mises √† jour automatiquement avant chaque commit.');

  } catch (error) {
    console.error('‚ùå Erreur installation hooks:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  installGitHooks();
}

module.exports = { installGitHooks };